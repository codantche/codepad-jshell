# Page 44

Seção 2.18 Testando expressões: O Code Pad

Testar novos operadores e novas chamadas de método.

```
4 + 5
"Wombar".substring(2, 5)
```

# Page 45

Exercício 2.74 Considere as expressões a seguir.

```
99 + 3
"cat" + "fish"
"cat" + 9
9 + 3 + "cat"
"cat" + 3 + 9
"catfish".substring(3, 4)
"catfish".substring(3, 8)
```

Aprender algo que não esperava.

Inspecionar objetos.
Arrastar objeto para a bancada para uso adicional.

Declarar variáveis.
Escrever instruções completas.

Testar novos operadores e novas chamadas de método.

# Page 53

```
public class NumberDisplay 
{
  private int limit;
  private int value;

  public NumberDisplay
}

```

# Page 57

Exercício 3.9

```
! (4 < 5)
! false
(2 > 2) || ((4 == 4) && (1 < 0))
(2 > 2) || (4 == 4) && (1 < 0)
(34 != 33) & ! false
```


Depos de escrever suas respostas em uma folha de papel, abra o Code Pad no BlueJ e teste-o.

# Page 59

Exercício 3.17 Teste a expressão (8 % 3) no Code Pad. Tente outros números. O que acontece quando você utiliza o operador de resto com números negativos?

# Page 63

Exercício 3.25 Crie o objeto NumberDisplay com um limite de 80 no Code Pad digitando:

NumberDisplay nd = new NumberDisplay(80);

Chame então os métodos getValue(), setValue(int value) e increment() no Code Pad, [por exemplo digitando nd.getValue()].
Observe que as instruções (métodos modificadores) precisam de ponto-e-vírgula no final, ao passo que expressões (métodos de acesso) não precisam.

# Page 86

Exercício 4.14 Crie um ArrayList<String> no Code Pad digitando estas duas linhas:

import java.util.ArrayList;
new ArrayList<String>()

Se você escrever a última linha sem ponto-e-vírgula à esquerda, você verá o pequeno ícone vermelho de objeto. Arraste esse ícone até a bancada de objetos. Examine seus métodos e tente chamas alguns (como add, remove, size, is empty). Tente também chamar os mesmos métodos do Code Pad. Você pode acessar objetos na bancada de objetos pelo Code Pad utilizando sus nomes. Por exemplo, se houver um ArrayLust chamado al1 na bancada de objetos, no Code Pad você poderá digitar
al1.size()


23 ocorrências de bancada
10 ocorrências de code pad
